#!/usr/bin/python3
# -*- python -*-
# (c) 2014 John Lenton
# MIT licensed.
# from https://github.com/chipaca/goctest

import re
import signal
import subprocess
import sys

SHOW_LOGS = False
DEBUG = False

if "--show-logs" in sys.argv:
    sys.argv.remove("--show-logs")
    SHOW_LOGS = True
if "--debug" in sys.argv:
    sys.argv.remove("--debug")
    DEBUG = True

cached_rx = re.compile(rb'^((?:\s*--- )?PASS:?|ok\s+)(.*)(\(cached\))')
ok_rx = re.compile(rb'^((?:\s*--- )?PASS:?|ok\s+)')
fail_rx = re.compile(rb'^((?:\s*--- )?FAIL:?|OOPS:?)')
panic_rx = re.compile(rb'^(PANIC:?|panic:?|\.\.\. Panic:?)')
notest_rx = re.compile(rb'^\s*\?\s+')
log_rx = re.compile(rb'^\s*(?:\S+:\d+: )?\[(?:LOG|ERROR|WARNING|INFO|DEBUG|TRACE)\]')

class bcolors:
    CACHED = b'\033[38;5;22m'
    OK = b'\033[38;5;34m'
    FAIL = b'\033[38;5;196m'
    PANIC = b'\033[38;5;226m\033[48;5;88m'
    NOTEST = b'\033[38;5;241m'
    LOG = b'\033[38;5;243m'
    WARNING = b'\033[38;5;226m'
    ENDC = b'\033[0m'

class rr:
    CACHED = bcolors.CACHED + rb'\1' + bcolors.NOTEST + rb'\2' + bcolors.CACHED + rb'\3' + bcolors.ENDC
    PANIC = bcolors.PANIC + rb'\1' + bcolors.ENDC
    FAIL = bcolors.FAIL + rb'\1' + bcolors.ENDC
    OK = bcolors.OK + rb'\1' + bcolors.ENDC

signal.signal(signal.SIGPIPE, signal.SIG_DFL)
signal.signal(signal.SIGINT, signal.SIG_DFL)

if DEBUG:
    def debug(msg):
        print("<<<", msg.center(8), ">>>", end="")
else:
    def debug(msg):
        pass

def colorprint(line):
    if cached_rx.search(line) is not None:
        debug("cached")
        line = cached_rx.sub(rr.CACHED, line)
    elif panic_rx.search(line) is not None:
        debug("panic")
        line = panic_rx.sub(rr.PANIC, line)
    elif fail_rx.search(line) is not None:
        debug("fail")
        line = fail_rx.sub(rr.FAIL, line)
    elif ok_rx.search(line) is not None:
        debug("ok")
        line = ok_rx.sub(rr.OK, line)
    elif log_rx.search(line) is not None:
        if SHOW_LOGS:
            debug("log")
            line = bcolors.LOG + line + bcolors.ENDC
        else:
            line = b""
    elif notest_rx.search(line) is not None:
        debug("no test")
        line = bcolors.NOTEST + line + bcolors.ENDC
    else:
        debug("no match")

    sys.stdout.write(line.decode("utf-8"))
    sys.stdout.flush()

if sys.stdin.isatty():
    rv = subprocess.call(["go", "test", "-i"] + sys.argv[1:])
    if rv != 0:
        sys.exit(rv)

    if sys.stdout.isatty():
        # "go test" mode
        with subprocess.Popen(["go", "test"] + sys.argv[1:],
                              bufsize=0,
                              stderr=subprocess.STDOUT,
                              stdout=subprocess.PIPE) as proc:
            for line in proc.stdout:
                colorprint(line)
            sys.exit(proc.wait())
    else:
        sys.exit(subprocess.call(["go", "test"] + sys.argv[1:]))
else:
    # pipe mode
    for line in sys.stdin.buffer:
        colorprint(line)
